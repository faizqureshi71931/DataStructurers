import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.TreeSet;

public class Operations {
    public static void main(String[] args) {
        int[] testCases = { 1, 100, 10000, 100000 };

        for (int testCase : testCases) {
            System.out.println("Test Case: " + testCase);
           
            testOperations(new ArrayList<>(), testCase);
            testOperations(new LinkedList<>(), testCase);
            testOperations(new HashMap<>(), testCase);
            testOperations(new TreeSet<>(), testCase);

            System.out.println();
        }
    }

    private static void testOperations(Object dataStructure, int testCase) {
        long startTime, endTime;

        // Generate elements based on the testCase
        int[] elements = generateElements(1, testCase);

        // Insertion
        startTime = System.nanoTime();
        // Add elements to the data structure
        // ...

        endTime = System.nanoTime();
        System.out.println("Insertion Time: " + (endTime - startTime) + " ns");

        // Retrieval
        startTime = System.nanoTime();
        // Retrieve elements from the data structure
        // ...

        endTime = System.nanoTime();
        System.out.println("Retrieval Time: " + (endTime - startTime) + " ns");

        // Deletion
        startTime = System.nanoTime();
        // Delete elements from the data structure
        // ...

        endTime = System.nanoTime();
        System.out.println("Deletion Time: " + (endTime - startTime) + " ns");

        // Memory Usage
        long memoryUsage = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        System.out.println("Memory Usage: " + memoryUsage + " bytes");
    }

    private static int[] generateElements(int start, int end) {
        int[] elements = new int[end - start + 1];
        for (int i = 0; i < elements.length; i++) {
            elements[i] = start + i;
        }
        return elements;
    }
}
